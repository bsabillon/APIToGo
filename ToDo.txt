//get all user object
app.get('/user/', (request, response) =>  {
    database.any(`SELECT * FROM "user" `)
    .then((data) => {
        response.json(data);
    })
    .catch((error) => {
        response.send("ERROR" + error);
    }) 

});

//get cartDetails object by userId
app.get('/cartDetailsByUser/:email', (request, response) =>  {
    database.any(`SELECT "cartDetailsId", "cartQuantity", product."productId", product."productName", product."price", product."productPictureURL" FROM "cartDetails"
    INNER JOIN "product" ON product."productId" = "cartDetails"."productId"
	INNER JOIN "cart" ON cart."cartId" = "cartDetails"."cartId"
	WHERE cart."userEmail" = '${request.params.email}'
    `)
    .then((data) => {
        response.json(data);
    })
    .catch((error) => {
        response.send("ERROR" + error);
    }) 

});

//get cartDetailsTotal object by userId
app.get('/cartDetailsTotalByUser/:email', (request, response) =>  {
    database.any(`SELECT 
    SUM ("cartQuantity"*product."price") AS total
    FROM "cartDetails"
        INNER JOIN "product" ON product."productId" = "cartDetails"."productId"
        INNER JOIN "cart" ON cart."cartId" = "cartDetails"."cartId"
        WHERE cart."userEmail" ='${request.params.email}'
        GROUP BY cart."userEmail" 
    `)
    .then((data) => {
        response.json(data);
    })
    .catch((error) => {
        response.send("ERROR" + error);
    }); 
    

});

app.get('/orderDetailsByUser/:email/:cartStatusId', (request, response) =>  {
    database.any(`SELECT "cartDetailsId", "cartQuantity",
    product."productId", product."productName", product."price", product."productPictureURL",
    "address"."addressAlias", "address"."addressDescription","address"."addressPhone","address"."addressReference",
    "card"."cardDescription",
    "cartStatus"."statusDescription"
    FROM "cartDetails"
        INNER JOIN "product" ON product."productId" = "cartDetails"."productId"
        INNER JOIN "cart" ON cart."cartId" = "cartDetails"."cartId"
        INNER Join "cartStatus" ON "cartStatus"."cartStatusId" = "cart"."cartStatusId" 
        INNER JOIN "card" ON card."cardId"  = "cart"."cardId"
        INNER JOIN "address" ON address."addressId"  = "cart"."addressId"
        WHERE cart."userEmail" = '${request.params.email}'
        AND cart."cartStatusId" = '${request.params.cartStatusId}'
    `)
    .then((data) => {
        response.json(data);
    })
    .catch((error) => {
        response.send("ERROR" + error);
    });     

//Create new seller
app.put('/createSeller/:userEmail', (request, response) =>  {
    database.query(`UPDATE public."user"
    SET "sellerId" = (SELECT MAX("user"."sellerId")+1 FROM public."user")
    WHERE "userEmail" = '${request.params.userEmail}'
    `,
    request.body)
    .then((data) => {
        response
        .status(200)
        .json('{"response" : "user updated succesfully!"}');
    })
    .catch( (error) => {
        response.send(error);
    });
});

//get cartDetailsTotal and Count  by userId
//pending TODO
app.get('/cartTotalCountByUser/:email', (request, response) =>  {
    database.any(`SELECT 
    SUM ("cartQuantity"*product."price") AS total,
	SUM ("cartQuantity") AS NoProductos,
	cart."cartId"
    FROM "cartDetails"
        INNER JOIN "product" ON product."productId" = "cartDetails"."productId"
        INNER JOIN "cart" ON cart."cartId" = "cartDetails"."cartId"
        WHERE cart."userEmail" = '${request.params.email}' AND "cartStatusId"=2
        GROUP BY cart."cartId" 
    `)
    .then((data) => {
        response.json(data);
    })
    .catch((error) => {
        response.send("ERROR" + error);
    }); 
    

});

//get receivedOrdersByUser by userId
//pending TODO
app.get('/receivedOrdersByUser/:email', (request, response) =>  {
    database.any(`SELECT 
    SUM ("cartQuantity"*product."price") AS total,
	SUM ("cartQuantity") AS NoProductos,
	cart."cartId"
    FROM "cartDetails"
        INNER JOIN "product" ON product."productId" = "cartDetails"."productId"
        INNER JOIN "cart" ON cart."cartId" = "cartDetails"."cartId"
        WHERE cart."userEmail" = '${request.params.email}' AND "cartStatusId"=5
        GROUP BY cart."cartId" 
    `)
    .then((data) => {
        response.json(data);
    })
    .catch((error) => {
        response.send("ERROR" + error);
    }); 
    

});



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const registrationDomainServices = require('../domainServices/registrationDomainServices');
const axios = require('axios');

const functions = {
fecthUser: () => axios.get('http://localhost:5000/products/GetById/1')
    .then (res=> res.data)
    .catch(err => 'error'),

    fecthProduct: () => axios.get('http://localhost:5000/products/GetById/1')
    .then (res=> res.data)
    .catch(err => 'error')
}
var teacherReputation;

function isLowerThan100(teacherReputation){
if (teacherReputation<=100){
    return true;
}
else{
    return false;
}
};

test('Reputation is <=100', () => {
    expect(isLowerThan100(90)).toEqual(true)
});

test('Reputation is >100', () => {
    expect(isLowerThan100(101)).toEqual(false)
});

var user;

function AgeUser(user){
    if (user>=18){
        return true;
    }
    else{
        return false;
    }
};
    test('User Age is >=18', () => {
        expect(AgeUser(18)).toEqual(true)
    });
    
    test('User Age is <=18', () => {
        expect(AgeUser(17)).toEqual(false)
    });

 
    
    
    test('user fetched name should be Leanne Graham', () => {
        expect.assertions(1);
        return functions.fecthUser()
            .then(data => {
                expect(data.productName).toEqual('Tajadas de platano');

            
            })
    });

    test('user fetched name should be Leanne Graham', () => {
        expect.assertions(1);
        return functions.fecthProduct()
            .then(data => {
                expect(data.id).toBe(1);

            
            })
    });


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


 // let response = '';
    // domainMethods.isReputationValid(teacher)
    // .then( resolve => {
    //     response = resolve;
    // }).catch(reject => 
    // {
    //     response = reject;
    // }).finally(()=>{
    //     expect(response).toBe('Invalid');
    // }
    // );


(1,2,3,4,5,6,7,8,9,0,' ','!','@','#','$','%','^','&','*','(',')','-','_','=','+')